#!/usr/bin/env bash

PROJECT_ROOT=$(git rev-parse --show-toplevel)
export PROJECT_ROOT

action=${1:-"create"}

case $action in
  create) 
    minikube start \
      --cpus='4' \
      --driver='hyperkit' \
      --kubernetes-version='stable' \
      --memory='8G' \
      --nodes=2

    minikube addons enable ingress

    # Install metrics server
    make -C "${PROJECT_ROOT}/helm/metrics-server" deploy

    CLUSTER_IP=$(minikube ip)
    export CLUSTER_IP

    # Create Private Certificate Signing Authority
    "$PROJECT_ROOT"/bin/ca

    ## Install simple nginx app
    "$PROJECT_ROOT"/bin/cert nginx.minikube.local
    kubectl apply --filename=./manifests/nginx/deployment.yaml
    echo "$(minikube ip) nginx.minikube.local"  | sudo tee -a /etc/hosts

    ## Install Keycloak
    kubectl create ns keycloak
    "$PROJECT_ROOT"/bin/cert keycloak.minikube.local
    kubectl apply --filename=./manifests/keycloak/deployment.yaml
    echo "$(minikube ip) keycloak.minikube.local"  | sudo tee -a /etc/hosts

    # ## Install Kubernetes Dashboard
    # make -C "${PROJECT_ROOT}/helm/kubernetes-dashboard" deploy
    # kubectl apply --filename="${PROJECT_ROOT}/helm/kubernetes-dashboard/ingress.yaml"
    # echo "$CLUSTER_IP kubernetes-dashboard.minikube.local"  | sudo tee -a /etc/hosts

    # ## Install certificate manager
    # make -C "${PROJECT_ROOT}/helm/cert-manager" deploy

    # ## install operator lifecycle manager
    # kubectl apply --filename="${PROJECT_ROOT}/manifests/operator-lifecycle-manager/v0.20.0/crds.yaml"
    # kubectl apply --filename="${PROJECT_ROOT}/manifests/operator-lifecycle-manager/v0.20.0/olm.yaml"

    # ## Register RedHat Community Operators Source repo
    # kubectl apply --filename="${PROJECT_ROOT}/manifests/open-data-hub/catalog-source.yaml"
    # kubectl apply --filename="${PROJECT_ROOT}/manifests/open-data-hub/odh-subscription.yaml"

    ;;
  delete|destroy) 
    minikube delete
    ;;
  *)
    echo "unrecognied action"
    exit 0
    ;;
esac

# kubectl apply -n [namespace]-f <(echo '
# apiVersion: cert-manager.io/v1alpha2
# kind: Certificate
# metadata:
#   name: [certificate-name]
# spec:
#   secretName: [secret-name]
#   dnsNames:
#   - "*.[namespace].svc.cluster.local"
#   - "*.[namespace]"
#   issuerRef:
#     name: [issuer-name]
# ')