#!/usr/bin/env bash

ACTION=${1:-"create"}
PROJECT_ROOT=$(git rev-parse --show-toplevel)
# set max cores to count of available cores
MAX_CORES=$(sysctl -n hw.ncpu)
# set max ram to 75% of available memory
MAX_RAM=$(( $(sysctl -n hw.memsize) / $((1024**3)) / 4 * 3 ))
PROFILE=k8s-mlops

# tell dns resolver to use minikube as nameserver for any .lo domains
function resolver() {
  sudo rm /etc/resolver/minikube-$PROFILE

    cat << EOF | sudo tee -a /etc/resolver/minikube-$PROFILE
domain lo
nameserver $(minikube ip --profile=$PROFILE)
search_order 1
timeout 5
EOF
}

# extend minikube dns config to forward dns requests for .lo domain to minikube ip address
function dnsconfig() {
    cat <<EOF | kubectl apply -f -
---
apiVersion: v1
data:
  Corefile: |
    .:53 {
        errors
        health {
           lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           fallthrough in-addr.arpa ip6.arpa
           ttl 30
        }
        prometheus :9153
        hosts {
           192.168.64.1 host.minikube.internal
           fallthrough
        }
        forward . /etc/resolv.conf {
           max_concurrent 1000
        }
        cache 30
        loop
        reload
        loadbalance
    }
    lo:53 {
        errors
        cache 30
        forward . $(minikube ip --profile=$PROFILE)
    }
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
EOF
}

case $ACTION in
  create) 

    minikube start \
      --cpus="$MAX_CORES" \
      --disk-size='100g' \
      --driver='hyperkit' \
      --kubernetes-version='stable' \
      --memory="${MAX_RAM}g" \
      --nodes=1 \
      --profile="$PROFILE"

    # running multiple nodes can have issues with pv permissions
    # https://github.com/kubernetes/minikube/issues/12360

    minikube addons enable ingress --profile="$PROFILE"
    minikube addons enable ingress-dns --profile="$PROFILE"

    resolver

    # reload resolver config 
    sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
    sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist

    dnsconfig

    # # example deployment for hello john and hallo jane apps
    # kubectl apply --filename="${PROJECT_ROOT}/manifests/lo-test/deployment.yaml"

    # # test ns lookups directly to minikube
    # nslookup hello-john.lo $(minikube ip --profile=k8s-mlops)
    # nslookup hello-jane.lo $(minikube ip --profile=k8s-mlops)

    # # test ns lookups from host machine using curl
    # curl http://hello-john.lo
    # curl http://hello-jane.lo

    # Create Private Certificate Signing Authority
    "$HOME"/bin/ca

    # Install metrics server
    make -C "${PROJECT_ROOT}/helm/metrics-server" deploy

    ## Install certificate manager
    make -C "${PROJECT_ROOT}/helm/cert-manager" deploy

    make -C "${PROJECT_ROOT}/helm/postgresql" deploy
    
    kubectl apply -f helm/pgadmin/configmap.yaml
    make -C "${PROJECT_ROOT}/helm/pgadmin" deploy

    # create keycloak database and user

    make -C "${PROJECT_ROOT}/helm/keycloak" deploy

    # ## Install simple nginx app
    # kubectl apply --filename=./manifests/nginx/deployment.yaml

    # ## Install Kubernetes Dashboard
    # make -C "${PROJECT_ROOT}/helm/kubernetes-dashboard" deploy
    # kubectl apply --filename="${PROJECT_ROOT}/helm/kubernetes-dashboard/ingress.yaml"

    ## install operator lifecycle manager
    kubectl apply --filename="${PROJECT_ROOT}/manifests/operator-lifecycle-manager/v0.20.0/crds.yaml"
    kubectl apply --filename="${PROJECT_ROOT}/manifests/operator-lifecycle-manager/v0.20.0/olm.yaml"

    kubectl create ns keycloak
    kubectl apply --filename=./manifests/keycloak/deployment.yaml

    # # # ## Register RedHat Community Operators Source repo
    # kubectl apply --filename=manifests/open-data-hub/catalog-source.yaml
    # kubectl apply --filename=manifests/open-data-hub/odh-subscription.yaml

    # ## create ml-workshop
    # kubectl create ns ml-workshop
    kubectl apply --filename=manifests/ml-platform/ml-platform.yaml --namespace ml-workshop
    ;;
  dashboard)
    TOKENNAME=$(kubectl -n kube-system get serviceaccount/dashboard-admin -o jsonpath='{.secrets[0].name}')
    TOKEN=$(kubectl -n kube-system get secret "$TOKENNAME" -o jsonpath='{.data.token}' | base64 --decode)
    echo "$TOKEN"
    open https://kubernetes-dashboard.minikube.local/
    ;;
  delete|destroy|ip|pause|ssh|start|stop|tunnel|unpause) 
    minikube "$ACTION" --profile="$PROFILE"
    ;;
  *)
    echo "unrecognied action"
    exit 0
    ;;
esac
