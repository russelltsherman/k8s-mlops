apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubernetes.io/limit-ranger:
      "LimitRanger plugin set: cpu, memory request for container
      mc; cpu, memory limit for container mc"
  creationTimestamp: "2022-07-17T20:05:14Z"
  generateName: minio-ml-workshop-
  labels:
    component.opendatahub.io/name: minio
    controller-uid: 018c2954-1bb1-4864-a784-a1c0dfb045bb
    job-name: minio-ml-workshop
    opendatahub.io/component: "false"
  name: minio-ml-workshop-9sl98
  namespace: ml-workshop
  ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: minio-ml-workshop
      uid: 018c2954-1bb1-4864-a784-a1c0dfb045bb
  resourceVersion: "6872"
  uid: a47c9aef-9faf-4118-b09a-12bececfc34a
spec:
  containers:
    - command:
        - /bin/sh
        - -c
        - mc --config-dir=/config config host add velero http://minio-ml-workshop:9000
          minio minio123 && mc --config-dir=/config mb --ignore-existing velero/data/
          && mc --config-dir=/config mb --ignore-existing velero/model-stats/tensordata/
          && mc --config-dir=/config mb --ignore-existing velero/models/ && mc --config-dir=/config
          cp /tmp/models.config velero/models && mc --config-dir=/config cp /tmp/prometheus_config.config
          velero/models && mc --config-dir=/config mb --ignore-existing velero/rawdata
          && mc --config-dir=/config policy set public velero/rawdata &&  mc --config-dir=/config
          mb --ignore-existing velero/mlflow && mc --config-dir=/config policy set public
          velero/mlflow &&  mc --config-dir=/config mb --ignore-existing velero/airflow
          && mc --config-dir=/config policy set public velero/airflow
      image: minio/mc:latest
      imagePullPolicy: IfNotPresent
      name: mc
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 500Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /tmp/models.config
          name: modelconfig
          subPath: models.config
        - mountPath: /tmp/prometheus_config.config
          name: promconfig
          subPath: prometheus_config.config
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access-7mfcd
          readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: k8s-mlops
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: OnFailure
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - emptyDir: {}
      name: config
    - configMap:
        defaultMode: 420
        name: modelconfig
      name: modelconfig
    - configMap:
        defaultMode: 420
        name: promconfig
      name: promconfig
    - name: kube-api-access-7mfcd
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
                - key: ca.crt
                  path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
